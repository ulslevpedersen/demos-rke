@inproceedings{Lee2008,
abstract = {Cyber-Physical Systems (CPS) are integrations of$\backslash$ncomputation and physical processes. Embedded$\backslash$ncomputers and networks monitor and control the$\backslash$nphysical processes, usually with feedback loops$\backslash$nwhere physical processes affect computations and$\backslash$nvice versa. The economic and societal potential of$\backslash$nsuch systems is vastly greater than what has been$\backslash$nrealized, and major investments are being made$\backslash$nworldwide to develop the technology. There are$\backslash$nconsiderable challenges, particularly because the$\backslash$nphysical components of such systems introduce$\backslash$nsafety and reliability requirements qualitatively$\backslash$ndifferent from those in general-purpose computing.$\backslash$nMoreover, physical components are qualitatively$\backslash$ndifferent from object-oriented software$\backslash$ncomponents. Standard abstractions based on method$\backslash$ncalls and threads do not work. This paper examines$\backslash$nthe challenges in designing such systems, and in$\backslash$nparticular raises the question of whether today's$\backslash$ncomputing and networking technologies provide an$\backslash$nadequate foundation for CPS. It concludes that it$\backslash$nwill not be sufficient to improve design$\backslash$nprocesses, raise the level of abstraction, or$\backslash$nverify (formally or otherwise) designs that are$\backslash$nbuilt on today's abstractions. To realize the full$\backslash$npotential of CPS, we will have to rebuild$\backslash$ncomputing and networking abstractions. These$\backslash$nabstractions will have to embrace physical$\backslash$ndynamics and computation in a unified way.},
author = {Lee, Edward A},
booktitle = {International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing (ISORC)},
doi = {10.1109/ISORC.2008.25},
isbn = {9780769531328},
pages = {363--369},
title = {{Cyber Physical Systems: Design Challenges}},
url = {http://chess.eecs.berkeley.edu/pubs/427.html},
year = {2008}
}
@inproceedings{Syme2011,
abstract = {We describe the asynchronous programming model in F{\#}, and its applications to reactive, parallel and concurrent programming. The key feature combines a core language with a non-blocking modality to author lightweight asynchronous tasks, where the modality has control flow constructs that are syntactically a superset of the core language and are given an asynchronous semantic interpretation. This allows smooth transitions between synchronous and asynchronous code and eliminates callback-style treatments of inversion of control, without disturbing the foundation of CPU-intensive programming that allows F{\#} to interoperate smoothly and compile efficiently. An adapted version of this approach has recently been announced for a future version of C{\#}.},
author = {Syme, Don and Petricek, Tomas and Lomov, Dmitry},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-18378-2_15},
isbn = {9783642183775},
issn = {03029743},
pages = {175--189},
title = {{The F{\#} asynchronous programming model}},
volume = {6539 LNCS},
year = {2011}
}
@misc{UN2015,
author = {{United Nations General Assembly Seventieth Session}},
title = {{Resolution A/70/1. Transforming our world: the 2030 Agenda for Sustainable Development}},
url = {http://undocs.org/A/RES/70/1},
year = {2015}
}
@misc{Demos2016,
author = {Pedersen, Rasmus Ulslev},
title = {{DEMOS Manifesto 2016, Invited Talk, UiO IfI}},
url = {https://github.com/ulslevpedersen/demos-ekvb},
year = {2016}
}
@article{Hatch2014,
abstract = {The article offers information on people who invented by turning their ideas into reality. Matthew Burnett, co-founder of Maker's Row, started the firm to create a platform to make manufacturing within the U.S. easy to access, using comprehensive database, and simple to understand, employing making process. Rachel Brooks, co-founder of Citizen Made, a white-label platform that small businesses can add to their websites, making it possible for customers to custom order products.},
author = {Hatch, Mark},
doi = {10.1162/INOV_a_00135},
isbn = {0071821120},
issn = {1558-2477},
journal = {The Maker Movement Manifesto},
pages = {1--31},
title = {{The Maker Movement Manifesto}},
year = {2014}
}
@article{Jul1987,
abstract = {Emerald is an object-based language and system designed for the construction of distributed programs. An explicit goal of Emerald is support for object mobility; objects in Emerald can freely move within the system to take advantage of distribution and dynamically changing environments. We say that Emerald has fine-grained mobility because Emerald objects can be small data objects as well as process objects. Fine-grained mobility allows us to apply mobility in new ways but presents imple- mentation problems as well. This paper discusses the benefits of tine-grained mobility, the Emerald language and run-time mechanisms that support mobility, and techniques for implementing mobility that do not degrade the performance of local operations. Performance measurements of the current implementation are included.},
author = {Jul, E. and Levy, H. and Hutchinson, N. and Black, a.},
doi = {10.1145/37499.37511},
isbn = {089791242X},
issn = {01635980},
journal = {ACM SIGOPS Operating Systems Review},
number = {5},
pages = {105--106},
title = {{Fine-grained mobility in the emerald system}},
url = {http://dl.acm.org/citation.cfm?id=35037.42182},
volume = {21},
year = {1987}
}
@book{IEEE2008,
abstract = {This standard specifies interchange and arithmetic formats and methods for binary and decimal floating-point arithmetic in computer programming environments. This standard specifies exception conditions and their default handling. An implementation of a floating-point system conforming to this standard may be realized entirely in software, entirely in hardware, or in any combination of software and hardware. For operations specified in the normative part of this standard, numerical results and exceptions are uniquely determined by the values of the input data, sequence of operations, and destination formats, all under user control.},
author = {IEEE},
booktitle = {IEEE Std 754-2008},
doi = {10.1109/IEEESTD.2008.4610935},
isbn = {9780738157528},
issn = {01419331},
keywords = {754-2008,IEEE standard,IEEE standards,NaN,arithmetic,arithmetic formats,binary,computer,computer programming,decimal,decimal floating-point arithmetic,exponent,floating point arithmetic,floating-point,format,interchange,number,programming,rounding,significand,subnormal},
number = {August},
pages = {1--70},
title = {{IEEE Standard for Floating-Point Arithmetic}},
url = {http://ieeexplore.ieee.org/xpl/freeabs{\_}all.jsp?arnumber=4610935},
volume = {2008},
year = {2008}
}
@inproceedings{Pedersen2010,
abstract = {The combination of two new fields is introduced: a field named micro information systems (micro-IS) and the field named ubiquitous knowledge discovery (KDubiq). Each of the fields offer new ways to understand the world of electronic devices that surround us. The micro-IS field primarily focuses on the combination of embedded systems and information systems, while the KDubiq system focuses on extracting the knowledge that is available from these systems. Furthermore, we demonstrate the LEGO{\textregistered}MINDSTORMS{\textregistered}NXT platform, and discuss the potential usefulness of running TinyOS, Squawk, and .NET Micro Framework using this platform. {\textcopyright} 2010 Springer-Verlag.},
author = {Pedersen, Rasmus Ulslev},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-642-16392-0_13},
isbn = {3642163912},
issn = {03029743},
pages = {216--234},
title = {{Micro information systems and ubiquitous knowledge discovery}},
volume = {6202 LNAI},
year = {2010}
}
@article{Schoeberl2010,
abstract = {In this paper, we propose a solution for a worst-case execution time (WCET) analyzable Java system: a combination of a time-predictable Java processor and a tool that performs WCET analysis at Java bytecode level. We present a Java processor, called JOP, designed for time-predictable execution of real-time tasks. The execution time of bytecodes, the instructions of the Java virtual machine, is known to cycle accuracy for JOP. Therefore, JOP simplifies the low-level WCET analysis. A method cache, which fills whole Java methods into the cache, simplifies cache analysis. The WCET analysis tool is based on integer linear programming. The tool performs the low-level analysis at the bytecode level and integrates the method cache analysis. An integrated data-flow analysis performs receiver-type analysis for dynamic method dispatches and loop-bound analysis. Furthermore, a model checking approach to WCET analysis is presented where the method cache can be exactly simulated. The combination of the time-predictable Java processor and the WCET analysis tool is evaluated with standard WCET benchmarks and three real-time applications. The WCET friendly architecture of JOP and the integrated method cache analysis yield tight WCET bounds. Comparing the exact, but expensive, model checking-based analysis of the method cache with the static approach demonstrates that the static approximation of the method cache is sufficiently tight for practical purposes. Copyright {\textcopyright} 2010 John Wiley {\&} Sons, Ltd.},
author = {Schoeberl, Martin and Puffitsch, Wolfgang and Pedersen, Rasmus Ulslev and Huber, Benedikt},
doi = {10.1002/spe.968},
issn = {1097-024X},
journal = {Software: Practice and Experience},
keywords = {Java processor,real-time system,worst-case execution time},
number = {6},
pages = {507--542},
title = {{Worst-case execution time analysis for a Java processor}},
url = {http://dx.doi.org/10.1002/spe.968},
volume = {40},
year = {2010}
}
